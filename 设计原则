没有任何原则是法律；所有的原则都应该在有帮助的时候才遵守；所有的设计都不免需要折衷（在抽象和速度之间取舍，在空间和时间之间平衡）；虽然原则提供了方针，但在采用原则之前，必须全盘考虑所有因素。

设计原则：
    1、区分变与不变，把变化的部分独立出来。
        根据现有经验和需求判断即可，不要做过度思考和设计。
    2、针对接口编程，而不是针对实现编程。
    3、多用组合，少用继承。
        继承：可能会获得不需要或者不想要的行为；类的行为在编译器就确定，不如组合的方式灵活
        组合：我们可以选择性使用组合对象的行为；可以在运行时改变组合的具体类型，可以在运行时改变行为
    4、为了交互对象之间的松耦合设计而努力
    5、类应该对扩展开放，对修改关闭
    6、依赖倒置原则：要依赖抽象，不要依赖具体类
    7、最少知识原则（Law of Demeter-得墨忒耳法则）：只和你的密友交谈
        减少对象之间的交互，只留下几个“密友”
        指导方针：就任何对象而言，在该对象的方法内，我们只应该调用属于以下范围的方法
            1、该对象本身
            2、被当作方法的参数传递进来的对象
            3、此方法所创建或者实例化的任何对象
            4、对象的任何组件
        缺点：
            采用这个原则会导致更多的“包装”类被制造出来，以处理和其他组件的沟通，这可能会导致复杂度和开发时间的增加，并降低运行时的性能


简单工厂
工厂方法
    创建具体产品
抽象工厂
    创建一系列产品
